set-option -g default-shell $SHELL
set -g default-terminal "screen-256color"
set-option -sa terminal-overrides ",xterm*:Tc"

set -g mode-keys vi
set -g history-limit 100000

# Setting Ctrl-A as prefix

unbind-key C-b
set -g prefix C-a
bind-key C-a send-prefix

# Using binding + Ctrl + L to clean the screen
bind C-l send-keys 'C-l'

# Avoid window title change

set-option -g allow-rename off

# Avoid hjkl delay that changed panes

set -s escape-time 0

# switch to last pane

# bind-key C-a last-pane

# Allow mouse usage

set-option -g mouse on

# Blink on updates

# Looks like this is not necessary anymore
# https://github.com/tmux/tmux/issues/230
# set -g status-utf8 on
set -g status-justify left
set -g monitor-activity off
set -g visual-activity off

# Pane Colors

set-option -g pane-border-style fg=colour235
set-option -g pane-active-border-style bg=colour236

setw -g window-status-style fg=white,bg=colour236,dim
setw -g window-status-current-style fg=green,bg=colour236,bright
setw -g window-status-activity-style bold,bg=colour236,fg=red

#set inactive/active window styles
set -g window-style 'fg=#dddddd,bg=colour236'
set -g window-active-style 'fg=#ffffff,bg=#000000'

# start window numbers at 1 to match keyboard order with tmux window order
set -g base-index 1
set-window-option -g pane-base-index 1

# Displays panes when <prefix>-q for 3 seconds
set-option -g display-panes-time 3000

# Do not renumber windows sequentially after closing any of them
set -g renumber-windows off

# Automatically rename tmux windows to the current directory
# https://stackoverflow.com/a/68043814
set-option -g status-interval 1
set-option -g automatic-rename on
# set-option -g automatic-rename-format "#{?#{==:#{pane_current_command},zsh},#{b:pane_current_path},#{pane_current_command}}"
set-option -g automatic-rename-format "#{b:pane_current_path}"

# NOTE: To display the current tmux options: `tmux show-options -g`

# ---

# Use Alt-vim keys without prefix key to switch panes

bind -n M-h select-pane -L
bind -n M-j select-pane -D
bind -n M-k select-pane -U
bind -n M-l select-pane -R

# Resize panes

bind -n M-Up resize-pane -U 2
bind -n M-Down resize-pane -D 2
bind -n M-Left resize-pane -L 2
bind -n M-Right resize-pane -R 2

# smart pane switching with awareness of vim splits
# Thanks to https://github.com/numToStr/Navigator.nvim/wiki/Tmux-Integration
version_pat='s/^tmux[^0-9]*([.0-9]+).*/\1/p'

is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n M-h if-shell "$is_vim" "send-keys M-h" "select-pane -L"
bind-key -n M-j if-shell "$is_vim" "send-keys M-j" "select-pane -D"
bind-key -n M-k if-shell "$is_vim" "send-keys M-k" "select-pane -U"
bind-key -n M-l if-shell "$is_vim" "send-keys M-l" "select-pane -R"
tmux_version="$(tmux -V | sed -En "$version_pat")"
setenv -g tmux_version "$tmux_version"

if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
  "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
  "bind-key -n 'M-\\' if-shell \"$is_vim\" 'send-keys M-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi M-h select-pane -L
bind-key -T copy-mode-vi M-j select-pane -D
bind-key -T copy-mode-vi M-k select-pane -U
bind-key -T copy-mode-vi M-l select-pane -R
bind-key -T copy-mode-vi M-\\ select-pane -l

# switch windows wht Alt + number

bind-key -n M-1 select-window -t 1
bind-key -n M-2 select-window -t 2
bind-key -n M-3 select-window -t 3
bind-key -n M-4 select-window -t 4
bind-key -n M-5 select-window -t 5
bind-key -n M-6 select-window -t 6
bind-key -n M-7 select-window -t 7
bind-key -n M-8 select-window -t 8
bind-key -n M-9 select-window -t 9

# Bindings for Tmux 2 to allow splitting windows in the current directory, not the home

bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

###########################
# Copy and paste bindings #
###########################

# y and p as in vim
# Ctrl-b [    starts scroll mode

bind Escape copy-mode
unbind p
bind p paste-buffer

# Bind v to start visual selection in vi-copy mode
bind-key -T copy-mode-vi 'v' send -X begin-selection

# # Bind y key in selection mode to copy selection to clipboard
# # Works on MacOS
# if-shell "uname | grep -q Darwin" "bind-key -T copy-mode-vi 'y' send-keys -X copy-pipe-and-cancel 'reattach-to-user-namespace pbcopy'" "bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel 'xclip -in -selection clipboard'"
#
# # bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard" \; display-message "highlighted selection copied to system clipboard"

################################
# Join and send panes to windows
################################
# Hint from http://unix.stackexchange.com/questions/14300/moving-tmux-pane-to-window

bind-key j command-prompt -p "join pane from:"  "join-pane -s '%%'"
bind-key s command-prompt -p "send pane to:"  "join-pane -t '%%'"

#############################################
# Sync all panes to execute the same commands
#############################################
## Set On
bind-key C-x setw synchronize-panes on \; display "Panes synchronized!"
## Set Off
bind-key M-x setw synchronize-panes off \; display "Panes unsynchronized!"

#####################
# Reload tmux configs
#####################
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded!"

bind w choose-tree -Zswf"##{==:##{session_name},#{session_name}}" # Only the sesion
bind e choose-tree -wf"##{==:##{session_name},#{session_name}}"   # With windows expanded

#########################################
# Tmux plugins, via Tmux Plugin Manager #
# https://github.com/tmux-plugins/tpm   #
#########################################
set -g @plugin 'tmux-plugins/tpm'
#    prefix + I
#     Installs new plugins from GitHub or any other git repository
#     Refreshes TMUX environment
#    prefix + U
#     updates plugin(s)
#    prefix + alt + u
#     remove/uninstall plugins not on the plugin list
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-resurrect'
#   prefix + Ctrl-s - save
#   prefix + Ctrl-r - restore
set -g @plugin 'tmux-plugins/tmux-continuum'
set -g @plugin 'tmux-plugins/tmux-open'
set -g @open-S 'https://www.google.com/search?q='
set -g @open-D 'https://duckduckgo.com/?q='
# In tmux copy mode:
#   o - "open" a highlighted selection with the system default program. open for OS X or xdg-open for Linux.
#   Ctrl-o - open a highlighted selection with the $EDITOR
#   Shift-s - search the highlighted selection directly inside a search engine (defaults to google).
set -g @plugin 'laktak/extrakto'
# You can fuzzy find your text instead of selecting it by hand:
#     press tmux prefix + tab to start extrakto
#     fuzzy find the text/path/url/line
#     use custom filters (ctrl + f)
#     press
#         tab to insert it to the current pane,
#         enter to copy it to the clipboard,
#     see other features in HELP (press ctrl-h in extrakto)
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @yank_action 'copy-pipe' # Remain in copy mode after copying
#     Normal Mode
#         prefix–y — copies text from the command line to the clipboard.
#         prefix–Y — copy the current pane's current working directory to the clipboard.
#     Copy Mode
#         y — copy selection to system clipboard.
#         Y (shift-y) — "put" selection. Equivalent to copying a selection, and pasting it to the command line.
# Catppuccin Theme
# https://github.com/catppuccin/tmux
set -g @plugin 'catppuccin/tmux'
set -g @catppuccin_flavour 'mocha' # or frappe, macchiato, mocha, latte
set -g @catppuccin_date_time "%Y-%m-%d %H:%M"
set -g @catppuccin_user "on"
set -g @catppuccin_host "on"
set -g @catppuccin_window_tabs_enabled on # or off to disable window_tabs
# Activate zoom indication
# https://github.com/catppuccin/tmux/pull/24
set -g @catppuccin_window_status_enable "yes"
set -g @catppuccin_window_status_icon_enable "yes"
set -g @catppuccin_icon_window_last " 󰖰 "
set -g @catppuccin_icon_window_current " 󰖯 "
set -g @catppuccin_icon_window_zoom " 󰁌 "
set -g @catppuccin_icon_window_mark " 󰃀 "
set -g @catppuccin_icon_window_silent " 󰂛 "
set -g @catppuccin_icon_window_activity " 󰖲 "
set -g @catppuccin_icon_window_bell " 󰂞 "


#---------------------------------------------------------------------------------
# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
run '~/.tmux/plugins/tpm/tpm'
